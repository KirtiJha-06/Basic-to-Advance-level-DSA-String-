TC: O(2^N)
SC: O(2^N)

class Solution {
public:
    string countAndSay(int n) {
        if (n == 1) return "1"; // Base case for n = 1
        if (n == 2) return "11"; // Base case for n = 2

        string s = "11"; // Starting string for n = 2
        for (int i = 3; i <= n; i++) {
            string t = ""; // Use an empty string instead of initializing with a space
            s += '&';      // Add a sentinel character to handle the last group
            int cnt = 1;

            for (int j = 1; j < s.length(); j++) {
                if (s[j] != s[j - 1]) { // Group breaks
                    t += to_string(cnt); // Append the count
                    t += s[j - 1];       // Append the character
                    cnt = 1;             // Reset count for the new group
                } else {
                    cnt++; // Increment count for the current group
                }
            }
            s = t; // Update `s` for the next iteration
        }

        return s; // Return the result for the nth term
    }
};
