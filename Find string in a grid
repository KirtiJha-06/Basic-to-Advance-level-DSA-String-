TC: O(N.M.L)
SC: O(N.M)
// Function to check if (i, j) is within the grid bounds
bool checkgrid(int i, int j, int rowLength, int colLength) {
    return (i >= 0 && j >= 0 && i < rowLength && j < colLength);
}

// Recursive function to check if the word exists in a given direction
bool solve(const vector<vector<char>>& grid, const string& word, int index, const string& type, int i, int j) {
    if (index == word.length()) return true; // If all characters matched, return true

    int rowLength = grid.size();
    int colLength = grid[0].size();

    // If out of bounds or character does not match, return false
    if (!checkgrid(i, j, rowLength, colLength) || grid[i][j] != word[index]) return false;

    // Move in the respective direction
    if (type == "left") return solve(grid, word, index + 1, type, i, j - 1);
    if (type == "right") return solve(grid, word, index + 1, type, i, j + 1);
    if (type == "up") return solve(grid, word, index + 1, type, i - 1, j);
    if (type == "down") return solve(grid, word, index + 1, type, i + 1, j);
    if (type == "up-left") return solve(grid, word, index + 1, type, i - 1, j - 1);
    if (type == "up-right") return solve(grid, word, index + 1, type, i - 1, j + 1);
    if (type == "down-left") return solve(grid, word, index + 1, type, i + 1, j - 1);
    if (type == "down-right") return solve(grid, word, index + 1, type, i + 1, j + 1);

    return false; // If no direction works, return false
}

// Function to find all occurrences of the word in the grid
vector<vector<int>> searchWord(vector<vector<char>> grid, string word) {
    vector<string> type = {"left", "right", "up", "down", "up-left", "up-right", "down-left", "down-right"};
    vector<vector<int>> ans;

    for (int i = 0; i < grid.size(); i++) {
        for (int j = 0; j < grid[0].size(); j++) {
            for (const string& dir : type) {
                if (solve(grid, word, 0, dir, i, j)) {
                    ans.push_back({i, j});
                    break; // Move to the next starting position if found in any direction
                }
            }
        }
    }
    return ans;
}
