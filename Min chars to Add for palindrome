TC: O(N)
SC: O(N)

class Solution {  
public:  
    vector<int> computelps(string &pat) {  
        int n = pat.length();  
        vector<int> lps(n);  // LPS array to store the longest prefix suffix values  
        lps[0] = 0;  // First character has no proper prefix suffix  
        int len = 0, i = 1;  

        // Compute the LPS array  
        while (i < n) {  
            if (pat[i] == pat[len]) {  // If characters match  
                len++;  
                lps[i] = len;  
                i++;  
            } else {  // If characters donâ€™t match  
                if (len != 0) {  
                    len = lps[len - 1];  // Move back in LPS array  
                } else {  
                    lps[i] = 0;  
                    i++;  
                }  
            }  
        }  
        return lps;  // Return the computed LPS array  
    }  

    int minChar(string& s) {  
        int n = s.length();  
        string rev = s;  
        reverse(rev.begin(), rev.end());  // Reverse the string  

        s = s + "$" + rev;  // Create a new pattern: s + "$" + reversed s  

        vector<int> lps = computelps(s);  // Compute LPS for the new string  

        return (n - lps.back());  // Min insertions = original length - LPS last value  
    }  
};
